const db = window.db;
console.log("üî• –°–∫—Ä–∏–ø—Ç –∏–≥—Ä–æ–∫–∞ –∑–∞–ø—É—â–µ–Ω!");

let gameStartedHandled = false;
let playerNumber = null;
let canVote = true;
window.voteCooldownTimer = null;
let meetingSound = null;
let deathSound = null;
const sessionStartedAt = Date.now();
document.addEventListener("click", () => {
  if (!meetingSound) {
    meetingSound = new Audio("/sounds/meeting_alert.mp3");
    meetingSound.load();
  }
  if (!deathSound) {
    deathSound = new Audio("/sounds/death_alert.mp3");
    deathSound.load();
  }
});

// ==================== –£—Ç–∏–ª–∏—Ç—ã ====================
function formatTime(ms) {
  const sec = Math.ceil(ms / 1000);
  const min = Math.floor(sec / 60);
  const s = sec % 60;
  return `${String(min).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
}


function showScreen(screenId) {
  document.querySelectorAll('.screen').forEach(el => el.classList.remove('active'));
  const el = document.getElementById(screenId);
  if (el) el.classList.add('active');
}

function resetAllScreens() {
  document.querySelectorAll(".screen, #hudScreen").forEach(el => {
    // –ù–ï —Ç—Ä–æ–≥–∞–π imosterImage, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∏–¥—ë—Ç reveal!
    if (el.id === "imposterImage" && window._roleRevealRunning) return;
    if (el) {
      el.style.display = "none";
      el.classList.remove("active", "visible");
    }
  });

  // –ù–µ —Å–∫—Ä—ã–≤–∞–π –∏–º–æ—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∞–Ω–∏–º–∞—Ü–∏—è reveal!
  const imposterImage = document.getElementById("imposterImage");
  if (imposterImage && !window._roleRevealRunning) {
    imposterImage.classList.remove("visible");
    imposterImage.style.opacity = "0";
    imposterImage.style.pointerEvents = "none";
  }
}



function handlePlayerDeletion() {
  localStorage.removeItem("playerNumber");
  localStorage.removeItem("voted");
  resetAllScreens();
  const reg = document.getElementById("registerScreen");
  if (reg) {
    reg.style.display = "flex";
    reg.classList.add("active");
  }
  alert("–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º.");
}

// ======= –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–æ–∫–æ–≤ =======
let onlinePlayersListener = null;
function monitorOnlinePlayers() {
  const onlineNumber = document.getElementById("onlineNumber");
  if (!onlineNumber) return;
  // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
  if (onlinePlayersListener) db.ref("players").off("value", onlinePlayersListener);
  onlinePlayersListener = snap => {
    const players = snap.val() || {};
    const count = Object.values(players).filter(p => p.status === "alive").length;
    onlineNumber.textContent = count;
  };
  db.ref("players").on("value", onlinePlayersListener);
}

let hudPlayersListener = null;
function monitorHudOnlinePlayers() {
  const hudOnlineNumber = document.getElementById("hudOnlineNumber");
  if (!hudOnlineNumber) return;
  // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
  if (hudPlayersListener) db.ref("players").off("value", hudPlayersListener);
  hudPlayersListener = snap => {
    const players = snap.val() || {};
    const count = Object.values(players).filter(p => p.status === "alive").length;
    hudOnlineNumber.textContent = count;
  };
  db.ref("players").on("value", hudPlayersListener);
}

// ==================== –°–±—Ä–æ—Å –∫ –æ–∂–∏–¥–∞–Ω–∏—é ====================
function handleGameResetToWaiting() {
  resetAllScreens();

  const waitingScreen = document.getElementById("waitingScreen");
  if (waitingScreen) {
    waitingScreen.style.display = "flex";
    waitingScreen.classList.add("active");
  }


  alert("–ò–≥—Ä–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.");
}


// ==================== –°—Ç–∞—Ä—Ç ====================
document.addEventListener("DOMContentLoaded", () => {
  const registerBtn = document.getElementById("registerBtn");
  if (registerBtn) {
    registerBtn.onclick = async () => {
      const input = document.getElementById("playerInput");
     const num = parseInt(input.value.trim());
if (isNaN(num) || num < 1 || num > 60) {
  alert("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 60");
  return;
}
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ:
      try {
        const snap = await db.ref("players/" + num).once("value");
        if (snap.exists()) {
          alert("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π!");
          return;
        }

        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞
        await db.ref("players/" + num).set({
          status: "alive",
          joinedAt: Date.now()
        });

        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ HUD
        initHUD(num);

      } catch (e) {
        alert("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
        console.error(e);
      }
    };
  }

  // --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—Ö–æ–¥–µ --- //
  const saved = localStorage.getItem("playerNumber");
  if (saved) {
    db.ref("players/" + saved).once("value", snap => {
      if (snap.exists()) initHUD(saved);
      else localStorage.removeItem("playerNumber");
    });
  }
});



// ==================== –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HUD ====================
let isResetting = false;
let roleRevealHandled = false; // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è

// üîÅ –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∑–∞–ø—É—Å–∫ roleRevealStart (–ø–æ–∫–∞–∑ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É)
db.ref("game/roleRevealStart").on("value", snap => {
  const start = snap.val();
  if (!start || roleRevealHandled) return;

  // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å—Ç–∞—Ä—à–µ –≤—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (start < sessionStartedAt) return;

  roleRevealHandled = true; // –±–ª–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è

  const now = Date.now();
  const delay = Math.max(0, start - now);

  const showRole = () => {
    const number = localStorage.getItem("playerNumber");
    if (!number) return;

    db.ref("players/" + number).once("value").then(snap => {
      const data = snap.val();
      if (!data || !data.role) return;

      // ------ –£–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ roleScreen, –Ω–∞–ø—Ä–∏–º–µ—Ä ------
      const roleScreen = document.getElementById("roleScreen");
      const roleText = document.getElementById("roleText");
      if (roleScreen && roleText) {

        roleText.style.color = data.role === "imposter" ? "red" : "dodgerblue";
        roleScreen.style.display = "flex";
        // –ó–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã:
        setTimeout(() => {
          roleScreen.style.display = "none";
        }, 2000);
      }
    });
  };


  if (delay > 0) {
    setTimeout(showRole, delay);
  } else {
    showRole();
  }
});


// üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–≥—Ä—ã
let lastState = null;

db.ref("game/state").on("value", snap => {
  const state = snap.val();
  lastState = state;

  if (state === "waiting") {
  const number = localStorage.getItem("playerNumber");
  resetAllScreens();
  if (number) {
    const waitingScreen = document.getElementById("waitingScreen");
    if (waitingScreen) waitingScreen.style.display = "flex";
    monitorOnlinePlayers?.();
  } else {
    const reg = document.getElementById("registerScreen");
    if (reg) {
      reg.style.display = "flex";
      reg.classList.add("active");
    }
  }
}

});



// ==================== HUD –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ====================
function initHUD(number) {
  playerNumber = number;
  const playerRef = db.ref("players/" + number);
  localStorage.setItem("playerNumber", number);

  resetAllScreens();
  const waitingScreen = document.getElementById("waitingScreen");
  if (waitingScreen) {
    waitingScreen.style.display = "flex";
    monitorOnlinePlayers();
  }

  db.ref("players/" + number).once("value").then(snap => {
    if (!snap.exists()) return playerRef.set({ status: "alive", role: "crew", joinedAt: Date.now() });
    if (!snap.val().joinedAt) return playerRef.update({ joinedAt: Date.now() });
  }).then(() => {
    db.ref("players/" + number).on("value", snap => {
      if (!snap.exists()) handlePlayerDeletion();
    });

    let playerAlive = true;
    db.ref("players/" + number).on("value", snap => {
      const data = snap.val();
      if (!data) return;

      if (data.status === "dead" && playerAlive) {
        playerAlive = false;
        if (deathSound) deathSound.play();
      }
    });

    const gameRef = db.ref("game");
    const handleGameChange = (snap) => {
      const game = snap.val();
      // –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –µ—â—ë –∏ state === "started"
      if (game?.state === "started" && !gameStartedHandled) {
        gameStartedHandled = true;
        db.ref("players/" + number).once("value").then(snap => {
          const player = snap.val();
          if (player.joinedAt > game.startedAt) {
            showHUD(playerRef);
          } else {
            startGameSequence(game, playerRef);
          }
        });
      }
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –≤ "started", —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      if (game?.state !== "started") {
        gameStartedHandled = false;
      }
    };
    gameRef.on("value", handleGameChange);
  });
}

function startGameSequence(game, playerRef) {
  const countdownScreen = document.getElementById("countdownScreen");
  const countdownNumber = document.getElementById("countdownNumber");
  const roleScreen = document.getElementById("roleScreen");
  const roleText = document.getElementById("roleText");

  const waitingScreen = document.getElementById("waitingScreen");
  if (waitingScreen) waitingScreen.style.display = "none";

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º countdownScreen
  if (countdownScreen) {
    countdownScreen.classList.add("active");
    countdownScreen.style.display = "flex";
    console.log("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º countdownScreen");
  }
  if (countdownNumber) countdownNumber.innerText = "–°–∫–æ—Ä–æ —É–∑–Ω–∞–µ—à—å —Å–≤–æ—é —Ä–æ–ª—å...";

  setTimeout(() => {
    let count = 3;
    const interval = setInterval(() => {
      if (countdownNumber) countdownNumber.innerText = count;
      count--;
      if (count < 0) {
        clearInterval(interval);
        if (countdownScreen) {
          countdownScreen.classList.remove("active");
          countdownScreen.style.display = "none";
        }
        db.ref("players/" + playerNumber + "/role").once("value", snap => {
          const role = snap.val();
          if (roleText) {
  if (role === "imposter") {
    roleText.innerHTML = "üü• –¢—ã –ò–ú–ü–û–°–¢–ï–†!<br><br><b>–°–ï–ö–†–ï–¢:</b> –µ—Å–ª–∏ –Ω–∞–∂–º—ë—à—å –Ω–∞ —Å–≤–æ—é –∏–∫–æ–Ω–∫—É <img src='avatars/red.webp' style='height:1.5em;vertical-align:middle;'> –ø–æ—è–≤—è—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏";
  } else {
    roleText.innerHTML = "üü¶ –¢—ã –º–∏—Ä–Ω—ã–π.";
  }
}


          if (roleScreen) {
            roleScreen.classList.add("active");
            console.log("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º roleScreen");
          }
          setTimeout(() => {
            if (roleScreen) roleScreen.classList.remove("active");
            showHUD(playerRef);
            console.log("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º HUD –ø–æ—Å–ª–µ —Å–æ–±—Ä–∞–Ω–∏—è");
          }, 4000);
        });
      }
    }, 2000);
  }, 3000);
}


function showHUD(playerRef) {
  const hudScreen = document.getElementById("hudScreen");
  const playerNumberEl = document.getElementById("playerNumber");
  const playerAvatar = document.getElementById("playerAvatar");
  if (hudScreen) hudScreen.style.display = "block";
  if (playerNumberEl) playerNumberEl.innerText = playerNumber;
  if (playerAvatar) playerAvatar.src = `avatars/${['red','blue','orange','black','white','pink'][(playerNumber - 1) % 6]}.webp`;
  monitorHudOnlinePlayers(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø—Ä—è–º–æ –≤ HUD!
  setupPlayerUI(playerRef);
  checkVotingWindow();
  updateMyVoteInfo();
  db.ref("suspicion").on("value", () => updateMyVoteInfo());
  db.ref("players").on("value", () => updateMyVoteInfo());
}
// ==================== UI ====================
function setupPlayerUI(playerRef) {
  const voteBtn = document.getElementById("voteBtn");
  const statusEl = document.getElementById("playerStatus");
  const taskSection = document.querySelector(".tasks-section");
  const meetingSection = document.getElementById("meetingSection");

  let lastRole = null;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞
  function changeBackground(isMeetingActive) {
    const body = document.body;
    if (isMeetingActive) {
      body.classList.add("meeting-active");
    } else {
      body.classList.remove("meeting-active");
    }
  }

  db.ref("meetings").on("value", snap => {
    const meeting = snap.val();
    if (meeting && meeting.active) {
      changeBackground(true);
    } else {
      changeBackground(false);
    }
  });


playerRef.on("value", snap => {
  const player = snap.val();
  if (!player) return;
  if (statusEl) {
    statusEl.innerText = player.status === "dead" ? "–ú—ë—Ä—Ç–≤" : "–ñ–∏–≤";
    statusEl.classList.toggle("dead", player.status === "dead");
  }
    if (player.status === "dead") {
    // –°–∫—Ä—ã–≤–∞–µ–º/–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const voteBtn = document.getElementById("voteBtn");
    if (voteBtn) {
      voteBtn.disabled = true;
      voteBtn.style.display = "none";
    }
    hideVotingButtons();
  }
  if (voteBtn) voteBtn.style.display = player.status === "dead" ? "none" : "block";
  if (taskSection) taskSection.style.display = player.role === "imposter" ? "none" : "block";

  // üëá –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫: —Å—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏
  if (
    player.role === "imposter" &&
    lastRole !== "imposter" &&                    // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–ª—å —Å—Ç–∞–ª–∞ –∏–º–ø–æ—Å—Ç–µ—Ä–æ–º –°–ï–ô–ß–ê–°
    typeof player.killAvailableAt === "undefined" // –∏ killAvailableAt –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω
  ) {
    db.ref("game/startedAt").once("value", snap2 => {
      const startedAt = snap2.val() || Date.now();
      const firstKillAvailableAt = startedAt + 60 * 1000; // —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
      playerRef.update({ killAvailableAt: firstKillAvailableAt, killsLeft: KILL_LIMIT });
    });
  }

  lastRole = player.role; 

  enableImposterHUD(player.role, player.status);
});



if (voteBtn) voteBtn.onclick = () => {
  if (!canVote) return;
  const target = prompt("–ù–∞ –∫–æ–≥–æ —Ç—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—à—å (1‚Äì60)?");
  if (!target || isNaN(target) || target < 1 || target > 60 || Number(target) === Number(playerNumber)) {
    return alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä");
  }
  db.ref("game/startedAt").once("value", snap => {
    const startedAt = snap.val() || 0;
    const now = Date.now();
    if (!startedAt || now < startedAt + 60 * 1000) {
      alert("–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã!");
      return;
    }
    db.ref("players/" + playerNumber + "/voteCooldownUntil").once("value", snap2 => {
      const cooldownUntil = snap2.val() || 0;
      if (cooldownUntil && now < cooldownUntil) {
        alert(`–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${formatTime(cooldownUntil - now)}`);
        return;
      }
      db.ref("players/" + target + "/status").once("value", statusSnap => {
        const status = statusSnap.val();
        if (status !== "alive") {
          alert("–ò–≥—Ä–æ–∫ —É–∂–µ –º—ë—Ä—Ç–≤. –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –Ω–µ–≥–æ –Ω–µ–ª—å–∑—è.");
          return;
        }
        const cooldown = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞
        const expireAt = Date.now() + cooldown;
        db.ref("suspicion").once("value", snap3 => {
          const suspicion = snap3.val() || {};
          const updates = {};
          Object.entries(suspicion).forEach(([someTarget, voters]) => {
            if (voters && voters[playerNumber]) {
              updates[`suspicion/${someTarget}/${playerNumber}`] = null;
            }
          });
          updates[`suspicion/${target}/${playerNumber}`] = expireAt;
          updates[`players/${playerNumber}/voteCooldownUntil`] = expireAt;
          db.ref().update(updates);
          canVote = false;
          if (voteBtn) {
            voteBtn.disabled = true;
            voteBtn.innerText = "–ì–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç–∞–Ω";
          }
          checkVotingWindow();
          updateMyVoteInfo();
        });
      });
    });
  });
};
}
const KILL_COOLDOWN = 60 * 1000; // 60 —Å–µ–∫—É–Ω–¥
const KILL_LIMIT = 2;

let killCooldownInterval = null;

// –í—ã–Ω–µ—Å–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø—É–ª—å—Å–∞—Ü–∏—è –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞—Å—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∞–ø–¥–µ–π—Ç–µ UI
let pulseShown = false;

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
function pulseImposterIcon() {
  const card = document.getElementById('playerCard');
  if (!card) return;
  card.classList.add('pulse-imp-icon');
  setTimeout(() => card.classList.remove('pulse-imp-icon'), 3000);
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞–Ω–µ–ª–∏ –∏–º–ø–æ—Å—Ç–µ—Ä–∞
function setupImposterTools(playerRef) {
  const killBtn = document.getElementById('killBtn');
  const killCooldown = document.getElementById('killCooldown');
  const killLeft = document.getElementById('killLeft');

  async function readAndUpdateUI() {
    const playerSnap = await playerRef.once("value");
    const player = playerSnap.val();
    const killsLeft = (typeof player.killsLeft === 'number') ? player.killsLeft : KILL_LIMIT;
    const killAvailableAt = player.killAvailableAt || 0;
    const now = Date.now();

    // –ö—É–ª–¥–∞—É–Ω
    if (killAvailableAt > now) {
      const left = Math.ceil((killAvailableAt - now) / 1000);
      killCooldown.innerText = `–û—Å—Ç–∞–ª–æ—Å—å: ${left} —Å–µ–∫.`;
      killBtn.disabled = true;
    } else {
      killCooldown.innerText = '';
      killBtn.disabled = (killsLeft <= 0);

      // –ü—É–ª—å—Å–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–≤—ã–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π
      if (!pulseShown && killsLeft > 0) {
        pulseImposterIcon();
        pulseShown = true;
      }
    }

    killLeft.innerText = `–û—Å—Ç–∞–ª–æ—Å—å —É–±–∏–π—Å—Ç–≤: ${killsLeft}`;
    if (killsLeft <= 0) killBtn.disabled = true;

    // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –∏ —ç—Ñ—Ñ–µ–∫—Ç –∫—É–ª–¥–∞—É–Ω–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
    killBtn.classList.toggle('kill-btn-on-cooldown', killBtn.disabled && (killAvailableAt > now));
    killBtn.classList.add('kill-btn');
  }

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
  playerRef.on("value", readAndUpdateUI);

  // –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  if (killCooldownInterval) clearInterval(killCooldownInterval);
  killCooldownInterval = setInterval(readAndUpdateUI, 1000);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
  killBtn.onclick = async () => {
    const playerSnap = await playerRef.once("value");
    const player = playerSnap.val();
    let killsLeft = (typeof player.killsLeft === 'number') ? player.killsLeft : KILL_LIMIT;
    let killAvailableAt = player.killAvailableAt || 0;
    const now = Date.now();

    if (killsLeft <= 0) return alert("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —É–±–∏–π—Å—Ç–≤–∞!");
    if (killAvailableAt > now) {
      alert(`–ü–æ–¥–æ–∂–¥–∏ ${Math.ceil((killAvailableAt - now)/1000)} —Å–µ–∫. –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–±–∏–π—Å—Ç–≤–∞!`);
      return;
    }

    const target = prompt("–ö–æ–≥–æ —É–±–∏—Ç—å? –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞ (1‚Äì60):");
    if (!target || isNaN(target) || target < 1 || target > 60 || Number(target) === Number(playerNumber)) {
      return alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏
    const statusSnap = await db.ref("players/" + target + "/status").once("value");
    if (statusSnap.val() !== "alive") {
      alert("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –º—ë—Ä—Ç–≤!");
      return;
    }

    // –£–±–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞
    await db.ref("players/" + target).update({ status: "dead" });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–ª–¥–∞—É–Ω –∏ –ª–∏–º–∏—Ç
    killsLeft -= 1;
    killAvailableAt = Date.now() + KILL_COOLDOWN;
    await playerRef.update({
      killsLeft: killsLeft,
      killAvailableAt: killAvailableAt
    });

    // –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–∑—É –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
    killBtn.disabled = true;
    readAndUpdateUI();
    alert(`–ò–≥—Ä–æ–∫ ‚Ññ${target} –±—ã–ª —É–±–∏—Ç!`);
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ HUD –∏–º–ø–æ—Å—Ç–µ—Ä–∞
function enableImposterHUD(playerRole, playerStatus) {
  const card = document.getElementById('playerCard');
  if (!card) return;
  card.onclick = null;

  // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—ã –∏–º–ø–æ—Å—Ç–µ—Ä –∏ –∂–∏–≤
  if (playerRole === "imposter" && playerStatus === "alive") {
    card.onclick = () => {
      showScreen('imposterHUD');
      const playerRef = db.ref("players/" + playerNumber);
      setupImposterTools(playerRef);
    };
    card.style.cursor = "pointer";
  } else {
    card.onclick = null;
    card.style.cursor = "default";
  }
}



// === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ —Å–æ–±—Ä–∞–Ω–∏—è
window.meetingTimerInterval = null;

// ==================== –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ Firebase ====================
window.db.ref("meetings").on("value", snap => {
  const m = snap.val();
  const hudScreen = document.getElementById("hudScreen");
  const meetingSection = document.getElementById("meetingSection");
  const meetingTarget = document.getElementById("meetingTarget");
  const meetingTimer = document.getElementById("meetingTimer");
  const kickCount = document.getElementById("meetingKickCount");
  const skipCount = document.getElementById("meetingSkipCount");

if (!hudScreen || !meetingSection || !meetingTarget) return;

if (m && m.active) {
  hudScreen.style.display = "none";
  meetingSection.style.display = "block";

  // üëá –°–ö–†–´–í–ê–ï–ú HUD –∏–º–ø–æ—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
  const imposterHUD = document.getElementById("imposterHUD");
  if (imposterHUD) {
    imposterHUD.style.display = "none";
    imposterHUD.classList.remove("active");
  }

  meetingTarget.innerText = `–¶–µ–ª—å: –ò–≥—Ä–æ–∫ ‚Ññ${m.target}`;
  if (m && m.active && m.timerSet === false) {
    if (meetingSound) meetingSound.play();
  }
  if (meetingTimer && m.startedAt) {
    if (window.meetingTimerInterval) clearInterval(window.meetingTimerInterval);

    const MEETING_DURATION = 30000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (30 —Å–µ–∫)

    function updateMeetingTimerDisplay() {
      const now = Date.now();
      const elapsed = now - m.startedAt;
      const remaining = Math.max(0, MEETING_DURATION - elapsed);
      const seconds = (remaining / 1000).toFixed(3); // –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      meetingTimer.innerText = seconds;

      if (remaining <= 0 && window.meetingTimerInterval) {
        clearInterval(window.meetingTimerInterval);
        countVotes(m); // –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
      }
    }

    updateMeetingTimerDisplay(); // –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É
    window.meetingTimerInterval = setInterval(updateMeetingTimerDisplay, 100); // –æ–±–Ω–æ–≤–ª—è–µ–º 10 —Ä–∞–∑/—Å–µ–∫
  }
  window.db.ref("meetings/votes").on("value", (snapshot) => {
    const votes = snapshot.val() || {};
    let kick = 0, skip = 0;
    Object.values(votes).forEach(v => {
      if (v === "kick") kick++;
      else if (v === "skip") skip++;
    });
    if (kickCount) kickCount.innerText = `–ö–∏–∫: ${kick}`;
    if (skipCount) skipCount.innerText = `–û—Å—Ç–∞–≤–∏—Ç—å: ${skip}`;
  });

} else {
  meetingSection.style.display = "none";
  if (window.meetingTimerInterval) clearInterval(window.meetingTimerInterval);
  localStorage.removeItem("voted");
  db.ref("players/" + playerNumber).once("value").then(snap => {
    if (snap.val()?.status !== "alive") {
      hudScreen.style.display = "none";
    } else {
      hudScreen.style.display = "block"; // üëà –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HUD –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∂–∏–≤!
    }
  });
}
});



// ==================== –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –∫–∏–∫–∞ ====================
let lastKickedShownAt = 0;

db.ref("game/lastKicked").on("value", (snap) => {
  const data = snap.val();
  if (!data || !data.number || !data.role || !data.shownAt) return;

  if (data.shownAt <= lastKickedShownAt) return;
  lastKickedShownAt = data.shownAt;

  let playerRoleStr;
  if (data.number === "skip") {
    playerRoleStr = "–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω";
  } else {
    playerRoleStr = `–ò–≥—Ä–æ–∫ ‚Ññ${data.number} ‚Äî ${data.role === "imposter" ? "–ò–º–ø–æ—Å—Ç–µ—Ä" : "–ú–∏—Ä–Ω—ã–π"}`;
  }
  showImposterImage(playerRoleStr, { timeout: 2500 });
});

function countVotes(meeting) {
  const votes = meeting.votes || {};
  let kick = 0, skip = 0;
  Object.values(votes).forEach(v => {
    if (v === "kick") kick++;
    else if (v === "skip") skip++;
  });

  const kickCount = document.getElementById("meetingKickCount");
  const skipCount = document.getElementById("meetingSkipCount");
  if (kickCount) kickCount.innerText = `–ö–∏–∫: ${kick}`;
  if (skipCount) skipCount.innerText = `–û—Å—Ç–∞–≤–∏—Ç—å: ${skip}`;

  if (kick > skip && meeting.target) {
    const kickedPlayer = meeting.target;
    db.ref("players/" + kickedPlayer + "/role").once("value", snap => {
      const playerRole = snap.val();

      // üü• –£–±–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞
      db.ref("players/" + kickedPlayer).update({ status: "dead" });

      // üü° –°–æ—Ö—Ä–∞–Ω—è–µ–º lastKicked –≤ game
      db.ref("game/lastKicked").set({
        number: kickedPlayer,
        role: playerRole,
        shownAt: Date.now()
      });

      // ‚úÖ –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å
      setTimeout(() => {
        db.ref("game/lastKicked").remove();
      }, 5000);
    });
  }
  
}





// ==================== –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–∏ (—Å –ø–µ—á–∞—Ç–Ω–æ–π –º–∞—à–∏–Ω–∫–æ–π!) ====================
function showImposterImage(playerRoleString) {
  console.log("üîî –ü–æ–∫–∞–∑ —Ä–æ–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è:", playerRoleString);
  if (window._roleRevealRunning) return;
  window._roleRevealRunning = true;

  const imageContainer = document.getElementById('imposterImage');
  const roleTextElement = document.getElementById('imposterRoleText');
  if (!imageContainer || !roleTextElement) return;

  let numberText = "";
  let roleText = "";
  const match = playerRoleString.match(/^–ò–≥—Ä–æ–∫ ‚Ññ(\d+)\s*‚Äî\s*(–ò–º–ø–æ—Å—Ç–µ—Ä|–ú–∏—Ä–Ω—ã–π)$/i);
  if (match) {
    numberText = `–ò–≥—Ä–æ–∫ ‚Ññ${match[1]}`;
    roleText = match[2];
  } else {
    numberText = playerRoleString;
    roleText = "";
  }

  imageContainer.style.display = "flex";
  imageContainer.classList.add("visible");
  roleTextElement.classList.add("visible");
  roleTextElement.style.color = "white";
  roleTextElement.textContent = "";

  let i = 0;
  function typeNumberText() {
    if (i < numberText.length) {
      roleTextElement.textContent = numberText.slice(0, i + 1);
      i++;
      setTimeout(typeNumberText, 100);
    } else {
      setTimeout(() => {
        roleTextElement.classList.remove("visible");
        setTimeout(() => {
          // –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å —Ü–≤–µ—Ç –±—É–¥–µ—Ç –∫—Ä–∞—Å–Ω—ã–º –¥–ª—è "–ò–º–ø–æ—Å—Ç–µ—Ä"
          roleTextElement.textContent = roleText;
          if (roleText.toLowerCase().includes("–∏–º–ø–æ—Å—Ç–µ—Ä")) {
            roleTextElement.style.color = "red";
          } else if (roleText.toLowerCase().includes("–º–∏—Ä–Ω—ã–π")) {
            roleTextElement.style.color = "dodgerblue";
          } else {
            roleTextElement.style.color = "white";
          }
          roleTextElement.classList.add("visible");

          setTimeout(() => {
            imageContainer.classList.remove("visible");
            setTimeout(() => {
              imageContainer.style.display = "none";
              document.body.removeAttribute("style");
              window._roleRevealRunning = false;
            }, 1000);
          }, 4000);
        }, 1000);
      }, 500);
    }
  }

  typeNumberText();
}




function updateVotingButtons() {
  const voteKickBtn = document.getElementById("voteKickBtn");
  const voteSkipBtn = document.getElementById("voteSkipBtn");
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫
  db.ref("players/" + playerNumber).once("value", snap => {
    if (!snap.exists() || snap.val().status !== "alive") {
      hideVotingButtons();
      return;
    }
    if (voteKickBtn && voteSkipBtn) {
      voteKickBtn.style.display = 'inline-block';
      voteSkipBtn.style.display = 'inline-block';
      voteKickBtn.disabled = false;
      voteSkipBtn.disabled = false;
    }
  });
}

function hideVotingButtons() {
  const voteKickBtn = document.getElementById("voteKickBtn");
  const voteSkipBtn = document.getElementById("voteSkipBtn");
  if (voteKickBtn && voteSkipBtn) {
    voteKickBtn.style.display = "none";
    voteSkipBtn.style.display = "none";
    voteKickBtn.disabled = true;
    voteSkipBtn.disabled = true;
  }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å –∑–∞—â–∏—Ç–æ–π ---
const voteKickBtn = document.getElementById("voteKickBtn");
if (voteKickBtn) {
  voteKickBtn.onclick = async () => {
    const snap = await db.ref("players/" + playerNumber).once("value");
    if (!snap.exists() || snap.val().status !== "alive") {
      alert("–ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!");
      hideVotingButtons();
      return;
    }
    db.ref(`meetings/votes/${playerNumber}`).set("kick").then(() => {
      hideVotingButtons();
    });
  };
}

const voteSkipBtn = document.getElementById("voteSkipBtn");
if (voteSkipBtn) {
  voteSkipBtn.onclick = async () => {
    const snap = await db.ref("players/" + playerNumber).once("value");
    if (!snap.exists() || snap.val().status !== "alive") {
      alert("–ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!");
      hideVotingButtons();
      return;
    }
    db.ref(`meetings/votes/${playerNumber}`).set("skip").then(() => {
      hideVotingButtons();
    });
  };
}

// --- –°–ª–µ–¥–∏–º –∑–∞ –º–∏—Ç–∏–Ω–≥–æ–º –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è ---
db.ref("meetings").on("value", (snapshot) => {
  const meetingData = snapshot.val();
  if (!meetingData) return;
  // –û–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
  if (meetingData.active && !(meetingData.votes && meetingData.votes[playerNumber])) {
    updateVotingButtons();
  }
});

db.ref("meetings/votes").on("value", (snapshot) => {
  const votes = snapshot.val();
  if (votes && !votes[playerNumber]) {
    updateVotingButtons();
  }
});

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–º (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
function updateMyVoteInfo() {
  Promise.all([
    db.ref("suspicion").once("value"),
    db.ref("players").once("value")
  ]).then(([suspicionSnap, playersSnap]) => {
    const suspicion = suspicionSnap.val() || {};
    const players = playersSnap.val() || {};
    let myTarget = null;

    Object.entries(suspicion).forEach(([target, voters]) => {
      if (
        voters && voters[playerNumber] &&
        players[target] && players[target].status === "alive"
      ) {
        myTarget = target;
      }
    });

    const voteInfoEl = document.getElementById("myVoteInfo");
    if (voteInfoEl) {
      voteInfoEl.innerText = myTarget
        ? `–í—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç–µ –∏–≥—Ä–æ–∫–∞ ‚Ññ${myTarget}`
        : `–í—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç–µ`;
    }
  });
}


function checkVotingWindow() {
  const voteBtn = document.getElementById("voteBtn");
  const cooldownTimer = document.getElementById("cooldownTimer");
  if (window.voteCooldownTimer) clearInterval(window.voteCooldownTimer);

  db.ref("game/startedAt").once("value", snap => {
    const startedAt = snap.val() || 0;
    const now = Date.now();
    if (!startedAt) {
      if (voteBtn) {
        voteBtn.disabled = true;
        voteBtn.innerText = "–û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞...";
      }
      if (cooldownTimer) cooldownTimer.innerText = "";
      return;
    }

    if (now < startedAt + 60 * 1000) {
      if (voteBtn) {
        voteBtn.disabled = true;
        const left = (startedAt + 60 * 1000) - now;
        voteBtn.innerText = `–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${formatTime(left)}`;
      }
      if (cooldownTimer) cooldownTimer.innerText = "";
      window.voteCooldownTimer = setInterval(() => {
        const t = (startedAt + 60 * 1000) - Date.now();
        if (t <= 0) {
          clearInterval(window.voteCooldownTimer);
          checkVotingWindow();
        } else if (voteBtn) {
          voteBtn.innerText = `–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${formatTime(t)}`;
        }
      }, 1000);
      return;
    }

    db.ref("players/" + playerNumber + "/voteCooldownUntil").once("value", snap2 => {
      const cooldownUntil = snap2.val() || 0;
      const now2 = Date.now();
      if (cooldownUntil && now2 < cooldownUntil) {
        if (voteBtn) {
          voteBtn.disabled = true;
          voteBtn.innerText = `–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${formatTime(cooldownUntil - now2)}`;
        }
        if (cooldownTimer) cooldownTimer.innerText = "";
        window.voteCooldownTimer = setInterval(() => {
          const t = cooldownUntil - Date.now();
          if (t <= 0) {
            clearInterval(window.voteCooldownTimer);
            checkVotingWindow();
          } else if (voteBtn) {
            voteBtn.innerText = `–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${formatTime(t)}`;
          }
        }, 1000);
      } else {
        if (voteBtn) {
          voteBtn.disabled = false;
          voteBtn.innerText = "–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å";
          canVote = true;
        }
        if (cooldownTimer) cooldownTimer.innerText = "";
      }
    });
  });
}
