const db = window.db;

document.addEventListener("DOMContentLoaded", () => {
  const playersList = document.getElementById("playersList");
  const startBtn = document.getElementById("startGameBtn");
  const stopBtn = document.getElementById("stopGameBtn");
  const clearBtn = document.getElementById("clearPlayersBtn");
  const assignRolesBtn = document.getElementById("assignRolesBtn");
  const gameStateLabel = document.getElementById("gameStateLabel");
  const votingTimer = document.getElementById("votingTimer");

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  db.ref("game/state").on("value", (snap) => {
    const state = snap.val();
    gameStateLabel.textContent = state === "started" ? "–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞" : "–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
  });

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
  db.ref("players").on("value", (snapshot) => {
    const players = snapshot.val() || {};
    playersList.innerHTML = "";
    Object.entries(players).forEach(([id, player]) => {
      const div = document.createElement("div");
      div.innerHTML = `
        <strong>‚Ññ${id}</strong> ‚Äî ${player.status === "alive" ? "üü¢ –ñ–∏–≤" : "‚ö∞Ô∏è –ú—ë—Ä—Ç–≤"}<br>
        –†–æ–ª—å: ${player.role || "?"}<br>
      `;

      const killBtn = document.createElement("button");
      killBtn.textContent = "–£–±–∏—Ç—å";
      killBtn.onclick = () => db.ref(`players/${id}/status`).set("dead");

      const reviveBtn = document.createElement("button");
      reviveBtn.textContent = "–û–∂–∏–≤–∏—Ç—å";
      reviveBtn.onclick = () => db.ref(`players/${id}/status`).set("alive");

      const deleteBtn = document.createElement("button");
      deleteBtn.textContent = "–£–¥–∞–ª–∏—Ç—å";
      deleteBtn.onclick = () => db.ref(`players/${id}`).remove();

      div.append(killBtn, reviveBtn, deleteBtn);
      div.style.marginBottom = "15px";
      playersList.appendChild(div);
    });
  });

  // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
  startBtn.addEventListener("click", () => {
    db.ref("players").once("value").then((snap) => {
      const ids = Object.keys(snap.val() || {});
      const shuffled = ids.sort(() => 0.5 - Math.random()).slice(0, 10);
      const updates = {};

      ids.forEach(id => {
        updates[`players/${id}/role`] = shuffled.includes(id) ? "imposter" : "crew";
      });

      const now = Date.now();
      updates["game/state"] = "started";
      updates["game/startedAt"] = now;

      return db.ref().update(updates);
    });
  });

  // –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã
  stopBtn.addEventListener("click", () => {
    if (confirm("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É?")) {
      db.ref().update({
        "game/state": "waiting",
        "game/startedAt": null,
        "game/voting": null,
        "suspicion": null,
        "meetings": null
      });
    }
  });

  // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
  clearBtn.addEventListener("click", () => {
    if (confirm("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤?")) {
      db.ref().update({
        players: null,
        meetings: null,
        game: { state: "waiting", startedAt: null },
        suspicion: null
      });
    }
  });

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –≤—Ä—É—á–Ω—É—é
  assignRolesBtn.addEventListener("click", () => {
    db.ref("players").once("value").then((snap) => {
      const ids = Object.keys(snap.val() || {});
      const shuffled = ids.sort(() => 0.5 - Math.random()).slice(0, 10);
      const updates = {};
      ids.forEach(id => {
        updates[`players/${id}/role`] = shuffled.includes(id) ? "imposter" : "crew";
      });
      return db.ref().update(updates);
    }).then(() => {
      alert("–†–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.");
    });
  });

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  let timerInterval = null;
  function formatTime(ms) {
    const sec = Math.ceil(ms / 1000);
    const min = Math.floor(sec / 60);
    const s = sec % 60;
    return `${String(min).padStart(2, "0")}:${String(s).padStart(2, "0")}`;
  }
  function updateVotingTimer() {
    db.ref("game/state").on("value", (snap) => {
      const state = snap.val();
      if (state === "started") {
        votingTimer.innerText = `‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ`;
      } else {
        votingTimer.innerText = `‚ùå –ó–∞–∫—Ä—ã—Ç–æ`;
      }
    });
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ —Ç–∞–π–º–µ—Ä—ã
  updateVotingTimer();
});
